package org.hyperion.rs2.model.content;

import org.hyperion.rs2.model.Player;
import org.hyperion.rs2.model.Item;
import org.hyperion.rs2.model.Animation;
import org.hyperion.rs2.model.Location;

public class ContentEntity {

	public static double getXp(Player player,int skill){
		return player.getSkills().getExperience(skill);
	}
	
	public static int getItemAmount(Player player,int id){
		Item i = player.getInventory().get(player.getInventory().getSlotById(id));
		if(i == null)
			return 0;
		else if(i.getDefinition().isStackable())
			return i.getCount();
		else {
			int count = 0;
			for(Item i2 : player.getInventory().toArray()){
				if(i2 != null){
					if(i2.getId() == id){
						count++;
					}
				}
			}
			return count;
		}
	}
	
	public static void sendInterfaceModel(Player player,int id, int zoom, int model){
		player.getActionSender().sendInterfaceModel(id,zoom,model);
	}
	public static void sendString(Player player,String s,int id){
		player.getActionSender().sendString(id,s);
	}
	public static void removeAllWindows(Player player){
		player.getActionSender().removeAllInterfaces();
	}
	
	public static void refreshSmithingScreen(Player player, int writeFrame,int[][] SMITHING_ITEMS){
		player.getActionSender().refreshSmithingScreen(writeFrame,SMITHING_ITEMS);
	}
	
	public static void showInterface(Player player,int id){
		player.getActionSender().showInterface(id);
	}
	
	public static int getItemSlot(Player player,int item){
		return player.getInventory().getSlotById(item);
	}
	
	public static void deleteItemAll(Player player,int id,int amount){
		for(Item i : player.getInventory().toArray()){
			if(i.getId() == id){
				player.getInventory().remove(i);
			}
		}
	}
	
	public static void turnTo(Player p,int x,int y){
	
	}
	
	public static void playerGfx(Player player,int gfx){
	
	}

	public static int freeSlots(Player players){
		return 1;
	}

	public static String getItemName(int item){
		return "";
	}
	
	public static String getObjectName(int id){
		return "";
	}
	
	public static void sendMessage(Player player,String message){
		player.getActionSender().sendMessage(message);
	}
	
	public static boolean isItemInBag(Player player,int itemId){
		Item i = player.getInventory().get(player.getInventory().getSlotById(itemId));
		if(i == null)
			return false;
		return true;
	}
	
	public static boolean addItem(Player player,int itemId){
		return addItem(player,itemId,1);
	}
	public static boolean addItem(Player player,int itemId,int amm){
		return player.getInventory().add(new Item(itemId,amm));
	}
	public static boolean addItem(Player player,int itemId,int amm,int slot){
		Item item = player.getInventory().get(slot);
		if(item != null)
			return false;
		player.getInventory().add(new Item(itemId,amm),slot);
		return true;
	}
	
	public static boolean deleteItem(Player player,int itemId){
		return player.getInventory().remove(new Item(itemId,1)) != 0;
	}
	
	public static boolean deleteItem(Player player,int itemId,int slot){
		return deleteItem(player,itemId,slot,1);
	}
	
	public static int returnSkillLevel(Player player,int skill){
		return player.getSkills().getLevel(skill);
	}
	
	public static void addSkillXP(Player player,double addXp,int skill){
	
	}
	
	public static boolean deleteItem(Player player,int itemId,int slot,int amount){
		Item item = player.getInventory().get(slot);
		if(item == null) {
			return false; // invalid packet, or client out of sync
		}
		if(item.getId() != itemId) {
			return false; // invalid packet, or client out of sync
		}
		if(item.getCount() < amount){
			return false;
		}
		return player.getInventory().remove(item,amount,slot);
	}
	
	public static int getLevelForXP(Player player,int xp){
		return 99;
	}
	
	public static int getLevelForXP(Player player,double xp){
		return getLevelForXP(player,(int) xp);
	}
	
	public static void openDialogue(Player player,String[] message){
	
	}
	
	public static void openInterface(Player player,int id){
	
	}
	
	public static void freezeWalking(Player player,int length){
	
	}
	
	public static int random(int range){
		return (int) (java.lang.Math.random() * (range + 1));
	}
	
	public static void showInterfaceWalkable(Player player,int i){
		player.getActionSender().showInterfaceWalkable(i);
	}
	
	public static boolean isInArea(Player player,int x1,int y1,int x2,int y2){
		if(player.getLocation().getX() >= x1 && player.getLocation().getX() <= x2
			&& player.getLocation().getY() >= y1 && player.getLocation().getY() <= y2)
				return true;
		return false;
	}
	
	public static void teleport(Player player,int x,int y,int z){
		player.setTeleportTarget(Location.create(x, y, z));
	}
	
	public static void startAnimation(Player player,int id){
		player.playAnimation(Animation.create(id, 0));
	}
	
	public static void startAnimation(Player player,int id,int delay){
		player.playAnimation(Animation.create(id, delay));
	}
	
	public static void replaceItem(Player player,int slot,int newId,int amount){
		Item i = player.getInventory().get(slot);
		if(i != null)
			player.getInventory().remove(i);
		addItem(player,newId,amount,slot);
	}
	
	public static void heal(Player player,int heal){
		player.heal(heal);
	}
	
	public static void increaseSkill(Player player,int skill,int am){
		//note do not use for HP!!!!!!
		if(skill == 3 || skill == 5){
			player.heal(am,skill);
			return;
		}
		if(player.getSkills().getLevel(skill) > player.getSkills().getLevelForExperience(skill)){
			player.getSkills().setLevel(skill, player.getSkills().getLevelForExperience(skill)+am);
		} else {
			player.getSkills().setLevel(skill, player.getSkills().getLevel(skill)+am);
		}
	}
	
	public static boolean isItemInBag(Player player,int item,int slot){
		Item item2 = player.getInventory().get(slot);
		if(item2 == null) {
			return false; // invalid packet, or client out of sync
		}
		if(item2.getId() != item) {
			return false; // invalid packet, or client out of sync
		}
		return true;
	}
}