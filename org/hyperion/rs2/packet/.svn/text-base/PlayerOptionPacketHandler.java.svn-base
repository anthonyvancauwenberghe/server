package org.hyperion.rs2.packet;

import org.hyperion.rs2.Constants;
import org.hyperion.rs2.model.container.Trade;
import org.hyperion.rs2.model.combat.Combat;
import org.hyperion.rs2.model.Player;
import org.hyperion.rs2.model.NPC;
import org.hyperion.rs2.model.World;
import org.hyperion.rs2.net.Packet;

public class PlayerOptionPacketHandler implements PacketHandler {

	@Override//,139,73,153
	public void handle(Player player, Packet packet) {
		switch(packet.getOpcode()) {
		case /*128*/153:
			/*
			 * Option 1.
			 */
			option1(player, packet);
			break;
		case /*37*/73:
			/*
			 * Option 2.
			 */
			option2(player,  packet);
			break;
		case /*227*/139:
			/*
			 * Option 3.
			 */
			option3(player, packet);
			break;
		case 174:
			player.isFollowing = false;
			break;
		case 72:
			int attacknpc = packet.getShortA();
			NPC victim = (NPC) World.getWorld().getNPCs().get(attacknpc);
			if(victim != null/* && player.getLocation().isWithinInteractionDistance(victim.getLocation())*/) {
				player.cE.setOpponent(victim.cE);
				if(!Combat.processCombat(player.cE))
					Combat.resetAttack(player.cE);
			}
			break;
		
		}
	}

	/**
	 * Handles the first option on a player option menu.
	 * @param player
	 * @param packet
	 */
	private void option1(final Player player, Packet packet) {
		int id = /*packet.getShort() & 0xFFFF*//*packet.get()*/packet.getLEShortA() - 128;
		//packet.get();//junk
		if(id < 0 || id >= Constants.MAX_PLAYERS) {
			return;
		}
		//System.out.println("attack: "+id);
		Player victim = (Player) World.getWorld().getPlayers().get(id);
		if(victim != null/* && player.getLocation().isWithinInteractionDistance(victim.getLocation())*/) {
			player.cE.setOpponent(victim.cE);
			if(!Combat.processCombat(player.cE))
				Combat.resetAttack(player.cE);
		}
	}
	
	/**
	 * Handles the second option on a player option menu.
	 * @param player
	 * @param packet
	 */
	private void option2(Player player, Packet packet) {
		int id = packet.getLEShortA() - 128;
		if(id < 0 || id >= Constants.MAX_PLAYERS) {
			return;
		}
		Player tradeWith = (Player) World.getWorld().getPlayers().get(id);
		if(tradeWith != null) {
			player.tradeWith2 = tradeWith;
			if(tradeWith.tradeWith2 == player)
				Trade.open(player,tradeWith);
			else
				tradeWith.getActionSender().sendMessage(player.getName()+" :tradereq:");
			/*if(player.getRequestManager().getRequestType() == null)
				if(player.getRequestManager().getRequestType() != RequestType.TRADE)
					player.getRequestManager().setRequestType(RequestType.TRADE);
			player.getRequestManager().setRequestState(RequestState.REQUESTED);
			player.getRequestManager().getRequestType().setClientName(tradeWith.getName());
			if(tradeWith.getRequestManager().getRequestType() == null)
				tradeWith.getRequestManager().setRequestType(RequestType.TRADE);
			if(tradeWith.getRequestManager().getRequestType().getClientName().equals(player.getName())){
				Trade.open(player,tradeWith);
			}*/
		}
	}
	
	/**
	 * Handles the third option on a player option menu.
	 * @param player
	 * @param packet
	 */
	private void option3(Player player, Packet packet) {
		int id = packet.getLEShortA() - 128;
		if(id < 0 || id >= Constants.MAX_PLAYERS) {
			return;
		}
		Player follow = (Player) World.getWorld().getPlayers().get(id);
		player.isFollowing = false;
		player.getActionSender().follow(id,1);
	}
		
}

