package org.hyperion.rs2.model.content.skill;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.List;

import org.hyperion.rs2.model.content.misc.Runes;
import org.hyperion.rs2.model.content.*;
import org.hyperion.rs2.model.Player;
import org.hyperion.rs2.model.World;
import org.hyperion.data.PersistenceManager;
import org.hyperion.rs2.event.*;

public class RuneCrafting  implements ContentTemplate {
	
	public RuneCrafting() {}
	
	private List<Runes> runes;
	
	
	
	/**
	 * Loads the XML file of runecrafting.
	 * @throws FileNotFoundException
	 */
	
	@Override
	public void init() throws FileNotFoundException {
		runes = (List<Runes>) PersistenceManager.load(new FileInputStream("./data/runecrafting.xml"));
	}
	
	/**
	 * Gets the real amount of the rune if player can make more runes from one essence.
	 * @param rune The rune.
	 * @param amount The current amount of the rune.
	 * @param level The current Runecrafting level of the player.
	 * @return The real amount of runes.
	 */
	
	public int getRuneAmount(int rune, int amount, int level) {
		Runes r = runes.get(getIndex(rune));
		int prev = 1;
		for(int i = 0; i < r.getLevels().length; i++) {
			if(r.getLevels()[i] >= level)
				prev++;
		}
		return prev*amount;
	}
	
	public int getIndex(int id) {
		for(Runes r : runes) {
			if(r.getRuneId() == id)
				return runes.indexOf(r);
			}
		return -1;
	}
	
	/**
	 * Gets the real amount of the rune if player can make more runes from one essence.
	 * @param rune The rune.
	 * @param amount The current amount of the rune.
	 * @param level The current Runecrafting level of the player.
	 * @return The real amount of runes.
	 */
	
	/*public int getRuneAmount(int rune, int amount, int level) {
		Runes r = runes.get(getIndex(rune));
		int prev = 1;
		for(int i = 0; i < r.getLevel().length; i++) {
			if(r.getLevel()[i] >= level)
				prev++;
		}
		return prev*amount;
	}*/
	
	public boolean isRunecraftable(final Player client, final int objectId, final int item, int objectX, int objectY) {
		final Runes r = runes.get(getIndex(item));
		if(r == null) return false;
		if(client.isBusy()) {
			ContentEntity.sendMessage(client,"You are too busy to do that.");
			return false;
		}
		if(ContentEntity.getLevelForXP(client,ContentEntity.getXp(client,20)) < 
				r.getLevel()) {
			ContentEntity.sendMessage(client,"You need a runecrafting level of "+r.getLevel()+" to" +
					"craft "+ContentEntity.getItemName(item)+"'s.");
			return false;
		} else if(ContentEntity.getLevelForXP(client,ContentEntity.getXp(client,20)) >= 
				r.getLevel()) {
			int useItemId = 1436;
			if(!ContentEntity.isItemInBag(client,1436) && ContentEntity.isItemInBag(client,7936))
				useItemId = 7936;
			if(!ContentEntity.isItemInBag(client,useItemId)) {
				ContentEntity.sendMessage(client,"You need some rune essence in order to runecraft.");
				return false;
			}
			ContentEntity.turnTo(client,objectX, objectY);
			//Work out how many runes to craft.
			int amount = ContentEntity.getItemAmount(client,useItemId);
			if(useItemId == 7936)
				amount = amount*2;
			/*int two = r.getLevel()*2;
			int three = r.getLevel()*3;
			int four = r.getLevel()*4;
			int five = r.getLevel()*5;
			int six = r.getLevel()*6;
			int seven = r.getLevel()*7;
			int eight = r.getLevel()*8;
			int nine = r.getLevel()*9;
			int ten = r.getLevel()*10;*/
			int xp = ContentEntity.getLevelForXP(client,ContentEntity.getXp(client,20));
			if(xp >= 99){
				amount = amount*10;
			} else if(xp >= 90) {
				amount = amount*9;
			} else if(xp >= 80) {
				amount = amount*8;
			} else if(xp >= 70) {
				amount = amount*7;
			} else if(xp >= 60) {
				amount = amount*6;
			} else if(xp >= 50) {
				amount = amount*5;
			} else if(xp >= 40) {
				amount = amount*4;
			} else if(xp >= 20) {
				amount = amount*3;
			} else if(xp >= 10) {
				amount = amount*2;
			} else if(xp >= 0) {
				amount = amount*1;
			}
			final int useItemId2 = useItemId;
			final int finalAmount = amount;
			final double runeExp = r.getExp()*finalAmount;
			//Start the runecrafting emote.
			client.setCanWalk(false);
			client.setBusy(true);
			ContentEntity.startAnimation(client,791);
			ContentEntity.playerGfx(client,186);
			ContentEntity.sendMessage(client,"You bind the temple's power into "+ContentEntity.getItemName(item)+"s.");
			//The runecrafting event.
			World.getWorld().submit(new Event(2300) {
				@Override
				public void execute() {	
					ContentEntity.deleteItemAll(client,useItemId2, 1);
					ContentEntity.addItem(client,r.getRuneId(), finalAmount);
					ContentEntity.sendMessage(client,"You craft "+finalAmount+" "+ContentEntity.getItemName(item)+"s.");
					ContentEntity.addSkillXP(client,runeExp, 20);
					// Stop the event.
					stop2();
				}
					
				public void stop2() {
					ContentEntity.startAnimation(client,-1);
					client.setBusy(false);
					client.setCanWalk(true);
					this.stop();
				}

			});
			return true;
		}
		return false;
	}
	
	@Override
	public int[] getValues(int type){
		return null;
	}
	
	@Override
	public boolean clickObject(final Player client,final int type,final int id,final int slot,final int itemId2,final int itemSlot2){
		return false;
	}
	
}
