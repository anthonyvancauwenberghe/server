package org.hyperion.rs2.net;

import org.hyperion.rs2.Constants;
import org.hyperion.rs2.model.combat.Combat;
import org.hyperion.rs2.model.Item;
import org.hyperion.rs2.model.Palette;
import org.hyperion.rs2.model.Player;
import org.hyperion.rs2.model.UpdateSpecialBar;
import org.hyperion.rs2.model.Location;
import org.hyperion.rs2.model.Skills;
import org.hyperion.rs2.model.World;
import org.hyperion.rs2.model.Palette.PaletteTile;
import org.hyperion.rs2.model.container.Equipment;
import org.hyperion.rs2.model.container.Inventory;
import org.hyperion.rs2.model.container.impl.EquipmentContainerListener;
import org.hyperion.rs2.model.container.impl.InterfaceContainerListener;
import org.hyperion.rs2.model.container.impl.WeaponContainerListener;
import org.hyperion.rs2.net.Packet.Type;

/**
 * A utility class for sending packets.
 * @author Graham Edgecombe
 *
 */
public class ActionSender {
	
	/**
	 * The player.
	 */
	private Player player;
	
	/**
	 * Creates an action sender for the specified player.
	 * @param player The player to create the action sender for.
	 */
	public ActionSender(Player player) {
		this.player = player;
	}
	
	/**
	 * Sends an inventory interface.
	 * @param interfaceId The interface id.
	 * @param inventoryInterfaceId The inventory interface id.
	 * @return The action sender instance, for chaining.
	 */
	public ActionSender sendInterfaceInventory(int interfaceId, int inventoryInterfaceId) {
		player.getInterfaceState().interfaceOpened(interfaceId);
		player.write(new PacketBuilder(248).putShortA(interfaceId).putShort(inventoryInterfaceId).toPacket());
		return this;
	}
	
	/**
	 * Sends all the login packets.
	 * @return The action sender instance, for chaining.
	 */
	public ActionSender sendLogin() {
		player.setActive(true);
		sendDetails();
		sendMessage("Welcome to RuneScape.");
		sendPlayerOption("Attack",2,1);
		sendPlayerOption("Trade",3,0);
		sendPlayerOption("Follow",4,0);
		sendMapRegion();
		sendSidebarInterfaces();
		World.getWorld().getGlobalItemManager().displayItems(player);
		InterfaceContainerListener inventoryListener = new InterfaceContainerListener(player, Inventory.INTERFACE);
		player.getInventory().addListener(inventoryListener);
		UpdateSpecialBar.specialPower(player);
		InterfaceContainerListener equipmentListener = new InterfaceContainerListener(player, Equipment.INTERFACE);
		player.getEquipment().addListener(equipmentListener);
		player.getEquipment().addListener(new EquipmentContainerListener(player));
		player.getEquipment().addListener(new WeaponContainerListener(player));
		if(player.isNew()){
			sendSkills();
			player.startUpEvents();
		}
		return this;
	}
	
	public ActionSender sendMultiZone(int i) {
		player.write(new PacketBuilder(61).put((byte)i).toPacket());
		return this;
	}
	
	public ActionSender sendWildLevel(int i) {
		int j = 197;
		if(i == -1)
			j = i;
		player.write(new PacketBuilder(208).putLEShort(j).toPacket());
		if(i != -1)
			sendString(199,"Level: " + i);
		return this;
	}
	
	public ActionSender showInterfaceWalkable(int i) {
		player.write(new PacketBuilder(208).putLEShort(i).toPacket());
		return this;
	}
	
	public ActionSender cameraMovement(int startX, int startY,int endX, int endY, int pixelHeight, int zoomSpeed, int movementSpeed) //Camera Movement packet - mad turnip
	{
		int mapRegionX = (startX >> 3) - 6;
		int mapRegionY = (startY >> 3) - 6;
		PacketBuilder bldr = new PacketBuilder(73);
		bldr.putShortA(mapRegionX + 6); // for some reason the client				
		bldr.putShort(mapRegionY + 6);// substracts 6 from those values
		
		int playerSquareX = endX - (mapRegionX*8);
		int playerSquareY = endY - (mapRegionY*8);
		
		/*PacketBuilder bldr3 = new PacketBuilder(166);
		bldr3.put((byte) (startX - (mapRegionX*8))); 
		bldr3.put((byte) (startY - (mapRegionY*8))); 
		bldr3.putShort(0);
		bldr3.put((byte) 128); 
		bldr3.put((byte) 0);*/
		
		PacketBuilder bldr2 = new PacketBuilder(166); //move camera
		bldr2.put((byte) playerSquareX);//
		bldr2.put((byte) playerSquareY); 
		bldr2.putShort(pixelHeight); //pixel height, it will increase to
		bldr2.put((byte) zoomSpeed); //plus - much slower than next variable - zooms in
		bldr2.put((byte) movementSpeed);// 0 - 99 / lower is slower - multipliyer
		
		player.write(bldr.toPacket());
		//player.write(bldr3.toPacket());
		player.write(bldr2.toPacket());
		return this;
	}
	
	public ActionSender rotateCamera(int startX, int startY,int turnToX, int turnToY, int pixelHeight, int zoomSpeed, int movementSpeed)//rotate camera method - mad turnip
	{
		
		int mapRegionX = (startX >> 3) - 6;
		int mapRegionY = (startY >> 3) - 6;
		PacketBuilder bldr = new PacketBuilder(73);
		bldr.putShortA(mapRegionX + 6); // for some reason the client				
		bldr.putShort(mapRegionY + 6);// substracts 6 from those values
		
		int playerSquareX = turnToX - (mapRegionX*8);
		int playerSquareY = turnToY - (mapRegionY*8);
		PacketBuilder bldr2 = new PacketBuilder(177); //rotate camera
		bldr2.put((byte) playerSquareX);
		bldr2.put((byte) playerSquareY); 
		bldr2.putShort(pixelHeight); 
		bldr2.put((byte) zoomSpeed); 
		bldr2.put((byte) movementSpeed);// 0 - 99
		
		player.write(bldr.toPacket());
		player.write(bldr2.toPacket());
		return this;
	}
	
	/*public void cameraMovement(int startX, int startY,int endX, int endY, int pixelHeight, int zoomSpeed, int movementSpeed) //Camera Movement packet - mad turnip
	{
		int mapRegionX = (startX >> 3) - 6;
		int mapRegionY = (startY >> 3) - 6;
		outStream.createFrame(73);
		outStream.writeWordA(mapRegionX + 6); // for some reason the client				
		outStream.writeWord(mapRegionY + 6);// substracts 6 from those values
		
		int playerSquareX = endX - (mapRegionX*8);
		int playerSquareY = endY - (mapRegionY*8);
		outStream.createFrame(166); //rotate camera
		outStream.writeByte(playerSquareX);
		outStream.writeByte(playerSquareY); 
		outStream.writeWord(pixelHeight); 
		outStream.writeByte(zoomSpeed); 
		outStream.writeByte(movementSpeed);// 0 - 99
	}
	
	public void rotateCamera(int startX, int startY,int turnToX, int turnToY, int pixelHeight, int zoomSpeed, int movementSpeed)//rotate camera method - mad turnip
	{
		
		int mapRegionX = (startX >> 3) - 6;
		int mapRegionY = (startY >> 3) - 6;
		outStream.createFrame(73);
		outStream.writeWordA(mapRegionX + 6); // for some reason the client				
		outStream.writeWord(mapRegionY + 6);// substracts 6 from those values
		
		int playerSquareX = turnToX - (mapRegionX*8);
		int playerSquareY = turnToY - (mapRegionY*8);
		outStream.createFrame(177); //rotate camera
		outStream.writeByte(playerSquareX);
		outStream.writeByte(playerSquareY); 
		outStream.writeWord(pixelHeight); 
		outStream.writeByte(zoomSpeed); 
		outStream.writeByte(movementSpeed);// 0 - 99
	}
	
	public void cameraReset()//reset to origional coords -mad turnip
	{
		int mapRegionX = (absX >> 3) - 6;
		int mapRegionY = (absY >> 3) - 6;
		outStream.createFrame(73);
		outStream.writeWordA(mapRegionX + 6); // for some reason the client				
		outStream.writeWord(mapRegionY + 6);// substracts 6 from those values
		outStream.createFrame(107); //reset camera
	}*/

	
	/*public ActionSender camera3(int Xcoords, int Ycoords,int direction, int Height, int turnSpeed, int movementSpeed) //
	{
		
		int mapRegionX = (Xcoords >> 3) - 6;
		int mapRegionY = (Ycoords >> 3) - 6;
		PacketBuilder bldr = new PacketBuilder(73);
		bldr.putShortA(mapRegionX + 6); // for some reason the client				
		bldr.putShort(mapRegionY + 6);// substracts 6 from those values
		
		int playerSquareX = Xcoords - (mapRegionX*8);
		int playerSquareY = Ycoords - (mapRegionY*8);
		int goToX = playerSquareX;
		int goToY = playerSquareY;
		if(direction == 0)//North
			goToY += 20;
		if(direction == 1)//east
			goToX += 20;
		if(direction == 2)//south
			goToY -= 20;
		if(direction == 3)//west
			goToX -= 20;
	
		PacketBuilder bldr2 = new PacketBuilder(166); //rotate camera
		bldr2.put((byte) goToX);
		bldr2.put((byte) goToY); 
		bldr2.putShort(Height); 
		bldr2.put((byte) turnSpeed); 
		bldr2.put((byte) movementSpeed);// 0 - 99
		
		player.write(bldr.toPacket());
		player.write(bldr2.toPacket());
		return this;
	}*/
	public ActionSender cameraReset()//reset to origional coords -mad turnip
	{
		int mapRegionX = (player.getLocation().getX() >> 3) - 6;
		int mapRegionY = (player.getLocation().getY() >> 3) - 6;
		PacketBuilder bldr = new PacketBuilder(73);
		bldr.putShortA(mapRegionX + 6); // for some reason the client				
		bldr.putShort(mapRegionY + 6);// substracts 6 from those values
		
		player.write(bldr.toPacket());
		player.write(new PacketBuilder(107).toPacket());//Resets Camera/CutScene Used for things such as the Wise Old Man robbing Draynor Bank
		return this;
	}


	/**
	 * Sends the packet to construct a map region.
	 * @param palette The palette of map regions.
	 * @return The action sender instance, for chaining.
	 */
	public ActionSender sendConstructMapRegion(Palette palette) {
		player.setLastKnownRegion(player.getLocation());
		PacketBuilder bldr = new PacketBuilder(241, Type.VARIABLE_SHORT);
		bldr.putShortA(player.getLocation().getRegionY() + 6);
		bldr.startBitAccess();
		for(int z = 0; z < 4; z++) {
			for(int x = 0; x < 13; x++) {
				for(int y = 0; y < 13; y++) {
					PaletteTile tile = palette.getTile(x, y, z);
					bldr.putBits(1, tile != null ? 1 : 0);
					if(tile != null) {
						bldr.putBits(26, tile.getX() << 14 | tile.getY() << 3 | tile.getZ() << 24 | tile.getRotation() << 1);
					}
				}
			}
		}
		bldr.finishBitAccess();
		bldr.putShort(player.getLocation().getRegionX() + 6);
		player.write(bldr.toPacket());
		return this;
	}

	/**
	 * Sends the initial login packet (e.g. members, player id).
	 * @return The action sender instance, for chaining.
	 */
	public ActionSender sendDetails() {
		player.write(new PacketBuilder(249).putByteA(player.isMembers() ? 1 : 0).putLEShortA(player.getIndex()).toPacket());
		player.write(new PacketBuilder(107).toPacket());
		return this;
	}
	
	/**
	 * Sends the player's skills.
	 * @return The action sender instance, for chaining.
	 */
	public ActionSender sendSkills() {
		for(int i = 0; i < Skills.SKILL_COUNT; i++) {
			sendSkill(i);
		}
		return this;
	}
	
	public ActionSender showInterface(int i) {
		PacketBuilder bldr = new PacketBuilder(97);
		bldr.putShort(i);
		player.write(bldr.toPacket());
		return this;
	}
	
	/**
	 * Sends a specific skill.
	 * @param skill The skill to send.
	 * @return The action sender instance, for chaining.
	 */
	public ActionSender sendSkill(int skill) {
		PacketBuilder bldr = new PacketBuilder(134);
		bldr.put((byte) skill);
		bldr.putInt1((int) player.getSkills().getExperience(skill));
		bldr.put((byte) player.getSkills().getLevel(skill));
		player.write(bldr.toPacket());
		return this;
	}
	
	public ActionSender removeAllInterfaces() {
		PacketBuilder bldr = new PacketBuilder(219);
		player.write(bldr.toPacket());
		return this;
	}
	
	public ActionSender sendFrame171(int i, int j) {
		PacketBuilder bldr = new PacketBuilder(171);
		bldr.put((byte)i);
		bldr.putShort(j);
		player.write(bldr.toPacket());
		return this;
	}
	
	public ActionSender packet70(int id1, int id2, int id3) {
		PacketBuilder bldr = new PacketBuilder(70);
		bldr.putShort(id1);
		bldr.putLEShort(id2);
		bldr.putLEShort(id3);
		player.write(bldr.toPacket());
		return this;
	}
	
	public ActionSender follow(int id,int type){
		if(!player.isFollowing){
			player.isFollowing = true;
			PacketBuilder bldr = new PacketBuilder(175);
			bldr.putShort(id);
			bldr.put((byte)type);
			bldr.putShort(10);
			player.write(bldr.toPacket());
		}
		return this;
	}
	
	public ActionSender resetFollow(){
		if(player.isFollowing){
			player.isFollowing = false;
			PacketBuilder bldr = new PacketBuilder(173);
			player.write(bldr.toPacket());
		}
		return this;
	}
	
	public ActionSender sendPacket164(int i) {
		PacketBuilder bldr = new PacketBuilder(164);
		bldr.putLEShort(i);
		player.write(bldr.toPacket());
		return this;
	}
	
	public ActionSender refreshSmithingScreen(int WriteFrame,int[][] SMITHING_ITEMS) {
		PacketBuilder bldr = new PacketBuilder(53, Type.VARIABLE);
		bldr.putShort(WriteFrame);
		bldr.putShort(SMITHING_ITEMS.length);
		
		for(int i = 0; i < SMITHING_ITEMS.length; i++) {
			SMITHING_ITEMS[i][0] += 1;
  			if (SMITHING_ITEMS[i][1] > 254) {
  				bldr.put((byte)255); // item's stack count. if over 254, write byte 255
  				bldr.putInt(SMITHING_ITEMS[i][1]); // and then the real value with writeDWord_v2
  			} else {
  				bldr.put((byte)SMITHING_ITEMS[i][1]);
  			}
  			bldr.putLEShortA(SMITHING_ITEMS[i][0]); // item id
		}
		player.write(bldr.toPacket());
		return this;
	}



	/**
	 * Sends all the sidebar interfaces.
	 * @return The action sender instance, for chaining.
	 */
	public ActionSender sendSidebarInterfaces() {
		final int[] icons = Constants.SIDEBAR_INTERFACES[0];
		final int[] interfaces = Constants.SIDEBAR_INTERFACES[1];
		for(int i = 0; i < icons.length; i++) {
			sendSidebarInterface(icons[i], interfaces[i]);
		}
		return this;
	}
	
	/**
	 * Sends a specific sidebar interface.
	 * @param icon The sidebar icon.
	 * @param interfaceId The interface id.
	 * @return The action sender instance, for chaining.
	 */
	public ActionSender sendSidebarInterface(int icon, int interfaceId) {
		player.write(new PacketBuilder(71).putShort(interfaceId).putByteA(icon).toPacket());
		return this;
	}
	
	/**
	 * Sends a message.
	 * @param message The message to send.
	 * @return The action sender instance, for chaining.
	 */
	public ActionSender sendMessage(String message) {
		player.write(new PacketBuilder(253, Type.VARIABLE).putRS2String(message).toPacket());
		return this;
	}
	
	public ActionSender sendPlayerOption(String message,int slot,int priority) {
		player.write(new PacketBuilder(104, Type.VARIABLE).putByteC(slot).putByteA(priority).putRS2String(message).toPacket());
		return this;
	}
	
	/**
	 * Sends the map region load command.
	 * @return The action sender instance, for chaining.
	 */
	public ActionSender sendMapRegion() {
		player.setLastKnownRegion(player.getLocation());
		player.write(new PacketBuilder(73).putShortA(player.getLocation().getRegionX() + 6).putShort(player.getLocation().getRegionY() + 6).toPacket());
		return this;
	}
	
	/**
	 * Sends the logout packet.
	 * @return The action sender instance, for chaining.
	 */
	public ActionSender sendLogout() {
		if(System.currentTimeMillis() - player.cE.lastHit >= 30000){
			Combat.logoutReset(player.cE);
			player.write(new PacketBuilder(109).toPacket()); // TODO IoFuture
		} else {
			sendMessage("You must be out of combat 30 seconds before you logout.");
		}
		return this;
	}
	
	/**
	 * Sends a packet to update a group of items.
	 * @param interfaceId The interface id.
	 * @param items The items.
	 * @return The action sender instance, for chaining.
	 */
	public ActionSender sendUpdateItems(int interfaceId, Item[] items) {
		PacketBuilder bldr = new PacketBuilder(53, Type.VARIABLE_SHORT);
		bldr.putShort(interfaceId);
		bldr.putShort(items.length);
		for(Item item : items) {
			if(item != null) {
				int count = item.getCount();
				if(count > 254) {
					bldr.put((byte) 255);
					bldr.putInt2(count);
				} else {
					bldr.put((byte) count);
				}
				bldr.putLEShortA(item.getId() + 1);
			} else {
				bldr.put((byte) 0);
				bldr.putLEShortA(0);
			}
		}
		player.write(bldr.toPacket());
		return this;
	}

	/**
	 * Sends a packet to update a single item.
	 * @param interfaceId The interface id.
	 * @param slot The slot.
	 * @param item The item.
	 * @return The action sender instance, for chaining.
	 */
	public ActionSender sendUpdateItem(int interfaceId, int slot, Item item) {
		PacketBuilder bldr = new PacketBuilder(34, Type.VARIABLE_SHORT);
		bldr.putShort(interfaceId).putSmart(slot);
		if(item != null) {
			bldr.putShort(item.getId() + 1);
			int count = item.getCount();
			if(count > 254) {
				bldr.put((byte) 255);
				bldr.putInt(count);
			} else {
				bldr.put((byte) count);
			}
		} else {
			bldr.putShort(0);
			bldr.put((byte) 0);
		}
		player.write(bldr.toPacket());
		return this;
	}
	
	/**
	 * Sends a packet to update multiple (but not all) items.
	 * @param interfaceId The interface id.
	 * @param slots The slots.
	 * @param items The item array.
	 * @return The action sender instance, for chaining.
	 */
	public ActionSender sendUpdateItems(int interfaceId, int[] slots, Item[] items) {
		PacketBuilder bldr = new PacketBuilder(34, Type.VARIABLE_SHORT).putShort(interfaceId);
		for(int i = 0; i < slots.length; i++) {
			Item item = items[slots[i]];
			bldr.putSmart(slots[i]);
			if(item != null) {
				bldr.putShort(item.getId() + 1);
				int count = item.getCount();
				if(count > 254) {
					bldr.put((byte) 255);
					bldr.putInt(count);
				} else {
					bldr.put((byte) count);
				}
			} else {
				bldr.putShort(0);
				bldr.put((byte) 0);
			}
		}
		player.write(bldr.toPacket());
		return this;
	}

	/**
	 * Sends the enter amount interface.
	 * @return The action sender instance, for chaining.
	 */
	public ActionSender sendEnterAmountInterface() {
		player.write(new PacketBuilder(27).toPacket());
		return this;
	}
	
	/**
	 * Sends the player an option.
	 * @param slot The slot to place the option in the menu.
	 * @param top Flag which indicates the item should be placed at the top.
	 * @return The action sender instance, for chaining.
	 */
	public ActionSender sendInteractionOption(String option, int slot, boolean top) {
		PacketBuilder bldr = new PacketBuilder(104, Type.VARIABLE);
		bldr.put((byte) -slot);
		bldr.putByteA(top ? (byte) 0 : (byte) 1);
		bldr.putRS2String(option);
		player.write(bldr.toPacket());
		return this;
	}
	
	public void sendClientConfig(int id, int state)
	{
		if(state < 255) {
			PacketBuilder bldr = new PacketBuilder(36);
			bldr.putLEShort(id);
			bldr.put((byte)state);
			player.write(bldr.toPacket());
		} else {
			sendClientConfig2(id, state);
		}
	}
	
	public void sendClientConfig2(int id, int state)
	{
		PacketBuilder bldr = new PacketBuilder(87);
		bldr.putLEShort(id);
		bldr.putInt1(state);
	}

	/**
	 * Sends a string.
	 * @param id The interface id.
	 * @param string The string.
	 * @return The action sender instance, for chaining.
	 */
	public ActionSender sendString(int id, String string) {
		PacketBuilder bldr = new PacketBuilder(126, Type.VARIABLE_SHORT);
		bldr.putRS2String(string);
		bldr.putShortA(id);
		player.write(bldr.toPacket());
		return this;
	}
	public void createGlobalProjectile(int casterY, int casterX, int offsetY, int offsetX, int angle, int speed, int gfxMoving, int startHeight, int endHeight, int lockon,int slope) {
		for(Player p : player.getLocalPlayers()){
			p.getActionSender().createProjectile(casterY, casterX, offsetY, offsetX, angle, speed, gfxMoving, startHeight, endHeight, lockon, slope);
		}
		createProjectile(casterY, casterX, offsetY, offsetX, angle, speed, gfxMoving, startHeight, endHeight, lockon,slope);
	}
	public void createProjectile(int casterY, int casterX, int offsetY, int offsetX, int angle, int speed, int gfxMoving, int startHeight, int endHeight, int lockon,int slope) {
		PacketBuilder playerCoord = new PacketBuilder(85).putByteC((casterY - (player.getLocation().getRegionY() * 8)) - 2).putByteC((casterX - (player.getLocation().getRegionX() * 8)) - 3);
		PacketBuilder projectile = new PacketBuilder(117).put((byte)angle).put((byte)offsetY).put((byte)offsetX).putShort(lockon).putShort(gfxMoving).put((byte)startHeight).put((byte)endHeight).putShort(51/*delay*/).putShort(speed).put((byte)slope/*slope*/).put((byte)64/*offset value on player tile*/);
		player.write(playerCoord.toPacket());
		player.write(projectile.toPacket());
	}
	
	public void sendStillGraphics(int id, int heightS, int y, int x, int timeBCS) {
		PacketBuilder playerCoord = new PacketBuilder(85).putByteC((y - (player.getLocation().getRegionY() * 8))).putByteC((x - (player.getLocation().getRegionX() * 8)));
		PacketBuilder graphic = new PacketBuilder(4);
		graphic.put((byte) 0);
		graphic.putShort(id);
		graphic.put((byte) heightS);
		graphic.putShort((byte) timeBCS);
		
		player.write(playerCoord.toPacket());
		player.write(graphic.toPacket());
	}

	public void createGlobalItem(Location loc,Item item){
		PacketBuilder globalDrop = new PacketBuilder(85);
		globalDrop.putByteC(loc.getLocalY(player.getLocation()));
		globalDrop.putByteC(loc.getLocalX(player.getLocation()));
		player.write(globalDrop.toPacket());
		
		PacketBuilder globalDrop2 = new PacketBuilder(44);
		globalDrop2.putLEShortA(item.getId());
		globalDrop2.putShort(item.getCount());
		globalDrop2.put((byte)0);
		player.write(globalDrop2.toPacket());
	}

	public void removeGlobalItem(Item item,Location location){
		PacketBuilder globalDrop = new PacketBuilder(85);
		globalDrop.putByteC(location.getLocalY(player.getLocation()));
		globalDrop.putByteC(location.getLocalX(player.getLocation()));
		player.write(globalDrop.toPacket());
		
		PacketBuilder globalDrop2 = new PacketBuilder(156);
		globalDrop2.putByteS((byte)0);
		globalDrop2.putShort(item.getId());
		player.write(globalDrop2.toPacket());
	}
	
	/**
	 * Sends a model in an interface.
	 * @param id The interface id.
	 * @param zoom The zoom.
	 * @param model The model id.
	 * @return The action sender instance, for chaining.
	 */
	public ActionSender sendInterfaceModel(int id, int zoom, int model) {
		PacketBuilder bldr = new PacketBuilder(246);
		bldr.putLEShort(id).putShort(zoom).putShort(model);
		player.write(bldr.toPacket());
		return this;
	}
	
	public ActionSender sendReplaceObject(int objectX, int objectY, int NewObjectID,int Face, int ObjectType) {
		
		PacketBuilder playerCoord = new PacketBuilder(85).putByteC((objectY - (player.getLocation().getRegionY() * 8))).putByteC((objectX - (player.getLocation().getRegionX() * 8)));
		
		PacketBuilder object = new PacketBuilder(101);
		object.putByteC((byte)((ObjectType << 2) + (Face & 3)));
		object.put((byte)0);

		PacketBuilder object2 = new PacketBuilder(151);
		object2.putByteS((byte)0);
		object2.putLEShort(NewObjectID);
		object2.putByteS((byte)((ObjectType << 2) + (Face & 3)));
		
		player.write(playerCoord.toPacket());
		player.write(object.toPacket());
		player.write(object2.toPacket());
		return this;
	}
	/*public void sendReplaceObject(Client client, int objectX, int objectY, int NewObjectID,
			int Face, int ObjectType) {
		if(!client.isAI){
		client.getOutStream().createFrame(85);
		client.getOutStream().writeByteC(objectY - (client.mapRegionY * 8));
		client.getOutStream().writeByteC(objectX - (client.mapRegionX * 8));

		client.getOutStream().createFrame(101);
		client.getOutStream().writeByteC((ObjectType << 2) + (Face & 3));
		client.getOutStream().writeByte(0);

		if (NewObjectID != -1) {
			client.getOutStream().createFrame(151);
			client.getOutStream().writeByteS(0);
			client.getOutStream().writeWordBigEndian(NewObjectID);
			client.getOutStream().writeByteS((ObjectType << 2) + (Face & 3));
			// FACE: 0= WEST | -1 = NORTH | -2 = EAST | -3 = SOUTH
			// ObjectType: 0-3 wall objects, 4-8 wall decoration, 9: diag.
			// walls, 10-11 world objects, 12-21: roofs, 22: floor decoration
		}
		client.flushOutStream();
		}
	}*/
	
	public void calculateBonus() {
		for(int i = 0; i < player.getBonus().length; i++) {
			player.getBonus()[i] = 0;
		}
		Item items[] = player.getEquipment().toArray();
		player.cE.setWeaponPoison(0);
		for(int i = 0; i < items.length; i++){
			if(items[i] == null)
				continue;
			if(items[i].getDefinition().getName().contains("(s)"))
				player.cE.setWeaponPoison(2);
			else if(items[i].getDefinition().getName().contains("(p)") && player.cE.getWeaponPoison() != 2)
				player.cE.setWeaponPoison(1);
			int[] bonus = items[i].getDefinition().getBonus();
			for(int k = 0; k < player.getBonus().length; k++) {
				player.getBonus()[k] += bonus[k];
			}
		}
		for(int i = 0; i < player.getBonus().length; i++) {
			String text = "";
			int offset = 0;
			if (player.getBonus()[i] >= 0) {
				text = Constants.BONUS_NAME[i] + ": +" + player.getBonus()[i];
			} else {
				text = Constants.BONUS_NAME[i] + ": -" + Math.abs(player.getBonus()[i]);
			}
			if (i >= 10) {
				offset = 1;
			}
			int interfaceid = 1675 + i + offset;
			sendString(interfaceid,text);
		}
	}
}
