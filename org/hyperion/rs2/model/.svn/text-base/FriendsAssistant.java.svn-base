package org.hyperion.rs2.model;

import org.hyperion.rs2.net.PacketBuilder;
import org.hyperion.rs2.net.Packet.Type;

public class FriendsAssistant {

	public static void initialize(Player p) {
		for(int i = 0; i < p.friends.length; i++) {
			if(p.friends[i] != 0)
				updateList(p,p.friends[i]);
		}
		refreshGlobalList(p,false);
		sendStatus(p,2);
	}
	
	public static void refreshGlobalList(Player p,boolean offline) {//login method, send all players onlinefor everyone else not u
		if(p.chatStatus[1] == 2)
			return;
		for(Player c : World.getWorld().getPlayers()) {
			if(c.chatStatus[1] == 2 || c == p)
				continue;
			if(isFriend(c,p.getNameAsLong()) && !isIgnore(p,c.getNameAsLong())) {
				boolean add = true;
				if(p.chatStatus[1] == 1)
					if(!isFriend(p,c.getNameAsLong()))
						add = false;
				if(add)
					if(!offline)
						sendPlayerOnline(c,p.getNameAsLong(),10);
					else
						sendPlayerOnline(c,p.getNameAsLong(),0);
			}
		}
	}
	
	public static void sendPlayerOnline(Player p,long playerOn,int world) {
		p.write(new PacketBuilder(50).putLong(playerOn).put((byte)world).toPacket());
	}
	
	public static void sendPm(Player p,long to, byte[] chatText,int chatTextSize) {
		for(byte b: chatText) {
			if(b != 0)
				System.out.println(""+((char) b));
		}
		for(Player c : World.getWorld().getPlayers()) {
			if(c.getNameAsLong() == to){
				sendPM(c,p.getNameAsLong(),chatText,chatTextSize);
			}
		}
	}
	
	public static int lastChatId = 1;
	public static void sendPM(Player p,long from, byte[] chatText,int chatTextSize) {
		if (lastChatId == 10000) {
			lastChatId = 1;
		}
		p.write(new PacketBuilder(196, Type.VARIABLE).putLong(from).putInt(lastChatId++).put((byte)p.getRights().toInteger()).put(chatText, 0,chatTextSize).toPacket());
	}
	
	public static void updateList(Player p,long friend){
		for(Player c : World.getWorld().getPlayers()){
			if(c.getNameAsLong() == friend && c.chatStatus[1] != 2 && (isFriend(c,p.getNameAsLong()) || c.chatStatus[1] == 0) && !isIgnore(c,p.getNameAsLong())){
				//sure there online send the packet
				sendPlayerOnline(p,friend,10);
				return;
			}
		}
		sendPlayerOnline(p,friend,0);
	}
	
	public static void addFriend(Player p,long friend){
		for(int i = 0; i < p.friends.length; i++) {
			if(p.friends[i] == 0) {
				p.friends[i] = friend;
				updateList(p,friend);
				return;
			}
		}
	}
	
	public static void removeFriend(Player p,long friend){
		for(int i = 0; i < p.friends.length; i++) {
			if(p.friends[i] == friend) {
				p.friends[i] = 0L;
				return;
			}
		}
	}
	
	public static void addIgnore(Player p,long friend){
		for(int i = 0; i < p.ingores.length; i++) {
			if(p.ingores[i] == 0) {
				p.ingores[i] = friend;
				updateList(p,friend);
				return;
			}
		}
	}
	
	public static void removeIgnore(Player p,long friend){
		for(int i = 0; i < p.ingores.length; i++) {
			if(p.ingores[i] == friend) {
				p.ingores[i] = 0L;
				return;
			}
		}
	}
	
	public static void sendStatus(Player p,int status) {
		p.write(new PacketBuilder(221).put((byte) status).toPacket());
	}
	
	
	public static boolean isFriend(Player p,long friend){
		for(long friend2 : p.friends){
			if(friend2 == friend)
				return true;
		}
		return false;
	}
	
	public static boolean isIgnore(Player p,long ingore){
		for(long ingore2 : p.ingores) {
			if(ingore == ingore2)
				return true;
		}
		return false;
	}
	
	
}