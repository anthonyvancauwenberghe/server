package org.hyperion.rs2.model.combat;

import java.util.List;
import java.util.LinkedList;

import org.hyperion.rs2.event.Event;
import org.hyperion.rs2.model.Animation;
import org.hyperion.rs2.model.Graphic;
import org.hyperion.rs2.model.Item;
import org.hyperion.rs2.model.Player;
import org.hyperion.rs2.model.Location;
import org.hyperion.rs2.model.NPC;
import org.hyperion.rs2.model.ItemDefinition;
import org.hyperion.rs2.model.Skills;
import org.hyperion.rs2.model.World;
import org.hyperion.rs2.model.container.Equipment;
import org.hyperion.rs2.model.content.skill.Prayer;

/**
*	Magic Class
*	@author Martin
*	credits to jonas++ for magic value arrays from shard evolution
*	Martin - wrote all the methods and etc.
*/

public class Magic {
	public static final int[] autocastIds = {/*normal*/1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845,/*ancients*/13189, 13241, 13147, 6162, 13215, 13267, 13167, 13125, 13202, 13254, 13158, 13114, 13228, 13280, 13178, 13136, };
	public static final int[] autoMagicId = {1152,1154,1156,1158,1160,1163,1166,1169,/*Wind Blast*/1172, /*Water Blast*/1175, /*Earth Blast*/1177, /*Fire Blast*/1181, /*Wind Wave*/1183, /*Water Wave*/1185,/*Earth Wave*/1188, /*Fire Wave*/1189,	/*Ancient Magicks*/ /*Smoke Rush*/12939, /*Shadow Rush*/12987, /*Blood Rush*/12901, /*Ice Rush*/12861, /*Smoke Burst*/12963, /*Shadow Burst*/13011, /*Blood Burst*/12919, /*Ice Burst*/12881, /*Smoke Blitz*/12951, /*Shadow Blitz*/12999, /*Blood Blitz*/12911, /*Ice Blitz*/12871, /*Smoke Barrage*/12975, /*Shadow Barrage*/13023, /*Blood Barrage*/12929, /*Ice Barrage*/12891};
	

	public static final int[] MAGIC_LEVELS		= {1, 3, 5, 9, 11, 13, 17, 19, 20, 23, 29, 35, 41, 47, 50, 50, 50, 53, 59, 60, 60, 60, 62, 65, 66, 70, 73, 75, 79, 80, 85,
		/*Ancient Magicks*/ 50, 52, 56, 58, 62, 64, 68, 70, 74, 76, 80, 82, 86, 88, 92, 94};
	public static final int[] EXPERIENCE		= {6, 13, 8, 10, 21, 12, 14, 29, 30, 17, 20, 23, 26, 29, 43, 61, 30, 32, 35, 35, 35, 35, 36, 38, 76, 50, 83, 43, 91, 180, 92, 
		/*Ancient Magicks*/ 30, 31, 33, 34, 36, 37, 39, 40, 42, 43, 45, 46, 48, 49, 51, 52};	
	public static final int[] MAX_HIT			= {2, -1, 4, 6, -1, 8, 9, -1, 1, 10, 11, 12, 13, 14, 25, 2, 20, 15, 16, 22, 22, 22, 17, 18, -1, 19, -1, 20, 4, -1, -1,
		/*Ancient Magicks*/ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30};
	
	public static final int[] START_GFX 		= {90, 102, 93, 96, 105, 99, 117, 108, 177, 120, 123, 126, 132, 135, 87, 177, 327, 138, 129, -1, -1, -1, 158, 161, 167, 164, 170, 155, 177, 173, 344,
		/*Ancient Magicks*/ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 366, -1, -1, -1, -1};
	public static final int[] MOVE_GFX 			= {91, 103, 94, 97, 106, 100, 118, 109, 178, 121, 124, 127, 133, 136, 88, 178, 328, 139, 130, -1, -1, -1, 159, 162, 168, 165, 171, 156, 178, 174, 344,
		/*Ancient Magicks*/ 384, 378, -1,-1,-1,-1,-1,-1,-1,-1,-1,366,-1,-1,-1,-1};
	public static final int[] END_GFX 			= {92, 104, 95, 98, 107, 101, 119, 110, 179, 122, 125, 128, 134, 137, 89, 179, 329, 140, 131, 76, 77, 78, 160, 163, 169, 166, 172, 157, 179, 80, 345,
		/*Ancient Magicks*/ 385, 379, 373, 361, 389, 382, 376, 363, 387, 381, 375, 367, 391, 383, 377, 369};
	public static final int[] CAST_ANIM 		= {711, 716, 711, 711, 729, 711, 711, 716, 711, 711, 711, 711, 711, 711, 708, 711, 711/*id?*/ , 711, 711, 811, 811, 811, 711, 711, 729, 711, 729, 711, 711, 729, 1819,
		/*Ancient Magicks*/ 1978, 1978, 1978, 1978, 1979, 1979, 1979, 1979, 1978, 1978, 1978, 1978, 1979, 1979, 1979, 1979};
	
	public static final int[] SPELLS 			= {/*Wind Strike*/1152, /*Confuse*/1153, /*Water Strike*/1154, /*Earth Strike*/1156, /*Weaken*/1157, /*Fire Strike*/1158, /*Wind Bolt*/1160, /*Curse*/1161, /*Bind*/1572, /*Water Bolt*/1163, /*Earth Bolt*/1166, /*Fire Bolt*/1169, /*Wind Blast*/1172, /*Water Blast*/1175, /*Iban Blast*/1539, /*Snare*/1582, /*Magic dart*/12037, /*Earth Blast*/1177, /*Fire Blast*/1181, /*Saradomin Strike*/1190, /*Claws of Guthix*/1191, /*Flames of Zamorak*/1192, /*Wind Wave*/1183, /*Water Wave*/1185, /*Vulnerability*/1542, /*Earth Wave*/1188, /*Enfeeble*/1543, /*Fire Wave*/1189, /*Entangle*/1592, /*Stun*/1562, /*Teleblock*/12445,	/*Ancient Magicks*/ /*Smoke Rush*/12939, /*Shadow Rush*/12987, /*Blood Rush*/12901, /*Ice Rush*/12861, /*Smoke Burst*/12963, /*Shadow Burst*/13011, /*Blood Burst*/12919, /*Ice Burst*/12881, /*Smoke Blitz*/12951, /*Shadow Blitz*/12999, /*Blood Blitz*/12911, /*Ice Blitz*/12871, /*Smoke Barrage*/12975, /*Shadow Barrage*/13023, /*Blood Barrage*/12929, /*Ice Barrage*/12891};
	
	public static final int[] FIRST_RUNE		= {/*Wind Strike*/556 , /*Confuse*/555 , /*Water Strike*/556 , /*Earth Strike*/556 , /*Weaken*/555 , /*Fire Strike*/556 , /*Wind Bolt*/556 , /*Curse*/555 , /*Bind*/555 , /*Water Bolt*/556 , /*Earth Bolt*/556 , /*Fire Bolt*/556 , /*Wind Blast*/556 , /*Water Blast*/556 , /*Iban Blast*/554 , /*Snare*/555 , /*Magic dart*/558  , /*Earth Blast*/556 , /*Fire Blast*/556 , /*Saradomin Strike*/565 , /*Claws of Guthix*/565 , /*Flames of Zamorak*/565 , /*Wind Wave*/556 , /*Water Wave*/556 , /*Vulnerability*/557 , /*Earth Wave*/556 , /*Enfeeble*/557 , /*Fire Wave*/556 , /*Entangle*/555 , /*Stun*/557 , /*Teleblock*/560  , /*Ancient Magicks*/ /*Smoke Rush*/562  , /*Shadow Rush*/562  , /*Blood Rush*/560  , /*Ice Rush*/560  , /*Smoke Burst*/562  , /*Shadow Burst*/562  , /*Blood Burst*/562  , /*Ice Burst*/562  , /*Smoke Blitz*/560  , /*Shadow Blitz*/562  , /*Blood Blitz*/560  , /*Ice Blitz*/560  , /*Smoke Barrage*/560  , /*Shadow Barrage*/560  , /*Blood Barrage*/560  , /*Ice Barrage*/565  };
	public static final int[] FIRST_AMOUNT		= {/*Wind Strike*/1   , /*Confuse*/3   , /*Water Strike*/1   , /*Earth Strike*/1   , /*Weaken*/3   , /*Fire Strike*/2   , /*Wind Bolt*/2   , /*Curse*/2   , /*Bind*/4   , /*Water Bolt*/2   , /*Earth Bolt*/2   , /*Fire Bolt*/3   , /*Wind Blast*/3   , /*Water Blast*/3   , /*Iban Blast*/5   , /*Snare*/4   , /*Magic dart*/4    , /*Earth Blast*/3   , /*Fire Blast*/4   , /*Saradomin Strike*/2   , /*Claws of Guthix*/2   , /*Flames of Zamorak*/2   , /*Wind Wave*/5   , /*Water Wave*/5   , /*Vulnerability*/5   , /*Earth Wave*/5   , /*Enfeeble*/8   , /*Fire Wave*/5   , /*Entangle*/5   , /*Stun*/12  , /*Teleblock*/1    , /*Ancient Magicks*/ /*Smoke Rush*/2    , /*Shadow Rush*/2    , /*Blood Rush*/2    , /*Ice Rush*/2    , /*Smoke Burst*/4    , /*Shadow Burst*/4    , /*Blood Burst*/2    , /*Ice Burst*/4    , /*Smoke Blitz*/2    , /*Shadow Blitz*/2    , /*Blood Blitz*/2    , /*Ice Blitz*/2    , /*Smoke Barrage*/4    , /*Shadow Barrage*/4    , /*Blood Barrage*/4    , /*Ice Barrage*/2    };
	public static final int[] SECOND_RUNE		= {/*Wind Strike*/558 , /*Confuse*/557 , /*Water Strike*/558 , /*Earth Strike*/558 , /*Weaken*/557 , /*Fire Strike*/558 , /*Wind Bolt*/562 , /*Curse*/557 , /*Bind*/557 , /*Water Bolt*/562 , /*Earth Bolt*/562 , /*Fire Bolt*/562 , /*Wind Blast*/560 , /*Water Blast*/560 , /*Iban Blast*/560 , /*Snare*/557 , /*Magic dart*/560  , /*Earth Blast*/560 , /*Fire Blast*/560 , /*Saradomin Strike*/554 , /*Claws of Guthix*/554 , /*Flames of Zamorak*/554 , /*Wind Wave*/565 , /*Water Wave*/565 , /*Vulnerability*/555 , /*Earth Wave*/565 , /*Enfeeble*/555 , /*Fire Wave*/565 , /*Entangle*/557 , /*Stun*/555 , /*Teleblock*/562  , /*Ancient Magicks*/ /*Smoke Rush*/560  , /*Shadow Rush*/560  , /*Blood Rush*/562  , /*Ice Rush*/562  , /*Smoke Burst*/560  , /*Shadow Burst*/560  , /*Blood Burst*/560  , /*Ice Burst*/560  , /*Smoke Blitz*/565  , /*Shadow Blitz*/560  , /*Blood Blitz*/565  , /*Ice Blitz*/565  , /*Smoke Barrage*/565  , /*Shadow Barrage*/565  , /*Blood Barrage*/565  , /*Ice Barrage*/555  };
	public static final int[] SECOND_AMOUNT		= {/*Wind Strike*/1   , /*Confuse*/2   , /*Water Strike*/1   , /*Earth Strike*/1   , /*Weaken*/2   , /*Fire Strike*/1   , /*Wind Bolt*/1   , /*Curse*/3   , /*Bind*/4   , /*Water Bolt*/1   , /*Earth Bolt*/1   , /*Fire Bolt*/1   , /*Wind Blast*/1   , /*Water Blast*/1   , /*Iban Blast*/1   , /*Snare*/4   , /*Magic dart*/1    , /*Earth Blast*/1   , /*Fire Blast*/1   , /*Saradomin Strike*/2   , /*Claws of Guthix*/1   , /*Flames of Zamorak*/4   , /*Wind Wave*/1   , /*Water Wave*/1   , /*Vulnerability*/5   , /*Earth Wave*/1   , /*Enfeeble*/8   , /*Fire Wave*/1   , /*Entangle*/5   , /*Stun*/12  , /*Teleblock*/1    , /*Ancient Magicks*/ /*Smoke Rush*/2    , /*Shadow Rush*/2    , /*Blood Rush*/2    , /*Ice Rush*/2    , /*Smoke Burst*/2    , /*Shadow Burst*/2    , /*Blood Burst*/4    , /*Ice Burst*/2    , /*Smoke Blitz*/2    , /*Shadow Blitz*/2    , /*Blood Blitz*/4    , /*Ice Blitz*/2    , /*Smoke Barrage*/2    , /*Shadow Barrage*/2    , /*Blood Barrage*/4    , /*Ice Barrage*/6    };
	public static final int[] THIRD_RUNE		= {/*Wind Strike*/0   , /*Confuse*/559 , /*Water Strike*/555 , /*Earth Strike*/557 , /*Weaken*/559 , /*Fire Strike*/554 , /*Wind Bolt*/0   , /*Curse*/559 , /*Bind*/561 , /*Water Bolt*/555 , /*Earth Bolt*/557 , /*Fire Bolt*/554 , /*Wind Blast*/0   , /*Water Blast*/555 , /*Iban Blast*/0   , /*Snare*/561 , /*Magic dart*/0    , /*Earth Blast*/557 , /*Fire Blast*/554 , /*Saradomin Strike*/556 , /*Claws of Guthix*/556 , /*Flames of Zamorak*/556 , /*Wind Wave*/0   , /*Water Wave*/555 , /*Vulnerability*/566 , /*Earth Wave*/557 , /*Enfeeble*/566 , /*Fire Wave*/554 , /*Entangle*/561 , /*Stun*/563 , /*Teleblock*/563  , /*Ancient Magicks*/ /*Smoke Rush*/554  , /*Shadow Rush*/556  , /*Blood Rush*/565  , /*Ice Rush*/555  , /*Smoke Burst*/554  , /*Shadow Burst*/556  , /*Blood Burst*/555  , /*Ice Burst*/555  , /*Smoke Blitz*/556  , /*Shadow Blitz*/556  , /*Blood Blitz*/0    , /*Ice Blitz*/555  , /*Smoke Barrage*/554  , /*Shadow Barrage*/556  , /*Blood Barrage*/566  , /*Ice Barrage*/560  };
	public static final int[] THIRD_AMOUNT		= {/*Wind Strike*/0   , /*Confuse*/1   , /*Water Strike*/1   , /*Earth Strike*/2   , /*Weaken*/1   , /*Fire Strike*/3   , /*Wind Bolt*/0   , /*Curse*/1   , /*Bind*/3   , /*Water Bolt*/2   , /*Earth Bolt*/3   , /*Fire Bolt*/4   , /*Wind Blast*/0   , /*Water Blast*/3   , /*Iban Blast*/0   , /*Snare*/3   , /*Magic dart*/0    , /*Earth Blast*/4   , /*Fire Blast*/5   , /*Saradomin Strike*/4   , /*Claws of Guthix*/4   , /*Flames of Zamorak*/1   , /*Wind Wave*/0   , /*Water Wave*/7   , /*Vulnerability*/1   , /*Earth Wave*/7   , /*Enfeeble*/1   , /*Fire Wave*/7   , /*Entangle*/4   , /*Stun*/1   , /*Teleblock*/1    , /*Ancient Magicks*/ /*Smoke Rush*/1    , /*Shadow Rush*/1    , /*Blood Rush*/1    , /*Ice Rush*/2    , /*Smoke Burst*/2    , /*Shadow Burst*/2    , /*Blood Burst*/2    , /*Ice Burst*/4    , /*Smoke Blitz*/2    , /*Shadow Blitz*/2    , /*Blood Blitz*/0    , /*Ice Blitz*/3    , /*Smoke Barrage*/4    , /*Shadow Barrage*/4    , /*Blood Barrage*/1    , /*Ice Barrage*/4    };
	public static final int[] FOURTH_RUNE		= {/*Wind Strike*/0   , /*Confuse*/0   , /*Water Strike*/0   , /*Earth Strike*/0   , /*Weaken*/0   , /*Fire Strike*/0   , /*Wind Bolt*/0   , /*Curse*/0   , /*Bind*/0   , /*Water Bolt*/0   , /*Earth Bolt*/0   , /*Fire Bolt*/0   , /*Wind Blast*/0   , /*Water Blast*/0   , /*Iban Blast*/0   , /*Snare*/0   , /*Magic dart*/0    , /*Earth Blast*/0   , /*Fire Blast*/0   , /*Saradomin Strike*/0   , /*Claws of Guthix*/0   , /*Flames of Zamorak*/0   , /*Wind Wave*/0   , /*Water Wave*/0   , /*Vulnerability*/0   , /*Earth Wave*/0   , /*Enfeeble*/0   , /*Fire Wave*/0   , /*Entangle*/0   , /*Stun*/0   , /*Teleblock*/0    , /*Ancient Magicks*/ /*Smoke Rush*/556  , /*Shadow Rush*/566  , /*Blood Rush*/0    , /*Ice Rush*/0    , /*Smoke Burst*/556  , /*Shadow Burst*/566  , /*Blood Burst*/0    , /*Ice Burst*/0    , /*Smoke Blitz*/556  , /*Shadow Blitz*/566  , /*Blood Blitz*/0    , /*Ice Blitz*/0    , /*Smoke Barrage*/556  , /*Shadow Barrage*/566  , /*Blood Barrage*/0    , /*Ice Barrage*/0    };
	public static final int[] FOURTH_AMOUNT		= {/*Wind Strike*/0   , /*Confuse*/0   , /*Water Strike*/0   , /*Earth Strike*/0   , /*Weaken*/0   , /*Fire Strike*/0   , /*Wind Bolt*/0   , /*Curse*/0   , /*Bind*/0   , /*Water Bolt*/0   , /*Earth Bolt*/0   , /*Fire Bolt*/0   , /*Wind Blast*/0   , /*Water Blast*/0   , /*Iban Blast*/0   , /*Snare*/0   , /*Magic dart*/0    , /*Earth Blast*/0   , /*Fire Blast*/0   , /*Saradomin Strike*/0   , /*Claws of Guthix*/0   , /*Flames of Zamorak*/0   , /*Wind Wave*/0   , /*Water Wave*/0   , /*Vulnerability*/0   , /*Earth Wave*/0   , /*Enfeeble*/0   , /*Fire Wave*/0   , /*Entangle*/0   , /*Stun*/0   , /*Teleblock*/0    , /*Ancient Magicks*/ /*Smoke Rush*/1    , /*Shadow Rush*/1    , /*Blood Rush*/0    , /*Ice Rush*/0    , /*Smoke Burst*/2    , /*Shadow Burst*/2    , /*Blood Burst*/0    , /*Ice Burst*/0    , /*Smoke Blitz*/2    , /*Shadow Blitz*/2    , /*Blood Blitz*/0    , /*Ice Blitz*/0    , /*Smoke Barrage*/4    , /*Shadow Barrage*/3    , /*Blood Barrage*/0    , /*Ice Barrage*/0    };
	
	public static final int[] STAFF_REQUIRED	= {/*Wind Strike*/0   , /*Confuse*/0   , /*Water Strike*/0   , /*Earth Strike*/0   , /*Weaken*/0   , /*Fire Strike*/0   , /*Wind Bolt*/0   , /*Curse*/0   , /*Bind*/0   , /*Water Bolt*/0   , /*Earth Bolt*/0   , /*Fire Bolt*/0   , /*Wind Blast*/0   , /*Water Blast*/0   , /*Iban Blast*/1409, /*Snare*/0   , /*Magic dart*/4170 , /*Earth Blast*/0   , /*Fire Blast*/0   , /*Saradomin Strike*/2415, /*Claws of Guthix*/2416, /*Flames of Zamorak*/2417, /*Wind Wave*/0   , /*Water Wave*/0   , /*Vulnerability*/0   , /*Earth Wave*/0   , /*Enfeeble*/0   , /*Fire Wave*/0   , /*Entangle*/0   , /*Stun*/0   , /*Teleblock*/0    , /*Ancient Magicks*/ /*Smoke Rush*/0    , /*Shadow Rush*/0    , /*Blood Rush*/0    , /*Ice Rush*/0    , /*Smoke Burst*/0    , /*Shadow Burst*/0    , /*Blood Burst*/0    , /*Ice Burst*/0    , /*Smoke Blitz*/0    , /*Shadow Blitz*/0    , /*Blood Blitz*/0    , /*Ice Blitz*/0    , /*Smoke Barrage*/0    , /*Shadow Barrage*/0    , /*Blood Barrage*/0    , /*Ice Barrage*/0    };
	
	public static final int[] freeze = {/*Wind Strike*/0   , /*Confuse*/0   , /*Water Strike*/0   , /*Earth Strike*/0   , /*Weaken*/0   , /*Fire Strike*/0   , /*Wind Bolt*/0   , /*Curse*/0   , /*Bind*/5   , /*Water Bolt*/0   , /*Earth Bolt*/0   , /*Fire Bolt*/0   , /*Wind Blast*/0   , /*Water Blast*/0   , /*Iban Blast*/0   , /*Snare*/10   , /*Magic dart*/0    , /*Earth Blast*/0   , /*Fire Blast*/0   , /*Saradomin Strike*/0   , /*Claws of Guthix*/0   , /*Flames of Zamorak*/0   , /*Wind Wave*/0   , /*Water Wave*/0   , /*Vulnerability*/0   , /*Earth Wave*/0   , /*Enfeeble*/0   , /*Fire Wave*/0   , /*Entangle*/15   , /*Stun*/0   , /*Teleblock*/0    , /*Ancient Magicks*/ /*Smoke Rush*/0    , /*Shadow Rush*/0    , /*Blood Rush*/0    , /*Ice Rush*/5    , /*Smoke Burst*/0    , /*Shadow Burst*/0    , /*Blood Burst*/0    , /*Ice Burst*/8    , /*Smoke Blitz*/0    , /*Shadow Blitz*/0    , /*Blood Blitz*/0    , /*Ice Blitz*/10    , /*Smoke Barrage*/0    , /*Shadow Barrage*/0    , /*Blood Barrage*/0    , /*Ice Barrage*/15    };
	public static final int[] reduceAtk = {/*Wind Strike*/0   , /*Confuse*/5   , /*Water Strike*/0   , /*Earth Strike*/0   , /*Weaken*/5   , /*Fire Strike*/0   , /*Wind Bolt*/0   , /*Curse*/0   , /*Bind*/0   , /*Water Bolt*/0   , /*Earth Bolt*/0   , /*Fire Bolt*/0   , /*Wind Blast*/0   , /*Water Blast*/0   , /*Iban Blast*/0   , /*Snare*/0   , /*Magic dart*/0    , /*Earth Blast*/0   , /*Fire Blast*/0   , /*Saradomin Strike*/0   , /*Claws of Guthix*/0   , /*Flames of Zamorak*/0   , /*Wind Wave*/0   , /*Water Wave*/0   , /*Vulnerability*/10   , /*Earth Wave*/0   , /*Enfeeble*/10   , /*Fire Wave*/0   , /*Entangle*/0   , /*Stun*/10   , /*Teleblock*/0    , /*Ancient Magicks*/ /*Smoke Rush*/0    , /*Shadow Rush*/5    , /*Blood Rush*/0    , /*Ice Rush*/0    , /*Smoke Burst*/0    , /*Shadow Burst*/10    , /*Blood Burst*/0    , /*Ice Burst*/0    , /*Smoke Blitz*/0    , /*Shadow Blitz*/15    , /*Blood Blitz*/0    , /*Ice Blitz*/0    , /*Smoke Barrage*/0    , /*Shadow Barrage*/20    , /*Blood Barrage*/0    , /*Ice Barrage*/0    };
	public static final int[] poison = {/*Wind Strike*/0   , /*Confuse*/0   , /*Water Strike*/0   , /*Earth Strike*/0   , /*Weaken*/0   , /*Fire Strike*/0   , /*Wind Bolt*/0   , /*Curse*/0   , /*Bind*/0   , /*Water Bolt*/0   , /*Earth Bolt*/0   , /*Fire Bolt*/0   , /*Wind Blast*/0   , /*Water Blast*/0   , /*Iban Blast*/0   , /*Snare*/0   , /*Magic dart*/0    , /*Earth Blast*/0   , /*Fire Blast*/0   , /*Saradomin Strike*/0   , /*Claws of Guthix*/0   , /*Flames of Zamorak*/0   , /*Wind Wave*/0   , /*Water Wave*/0   , /*Vulnerability*/0   , /*Earth Wave*/0   , /*Enfeeble*/0   , /*Fire Wave*/0   , /*Entangle*/0   , /*Stun*/0   , /*Teleblock*/0    , /*Ancient Magicks*/ /*Smoke Rush*/5    , /*Shadow Rush*/0    , /*Blood Rush*/0    , /*Ice Rush*/0    , /*Smoke Burst*/10    , /*Shadow Burst*/0    , /*Blood Burst*/0    , /*Ice Burst*/0    , /*Smoke Blitz*/15    , /*Shadow Blitz*/0    , /*Blood Blitz*/0    , /*Ice Blitz*/0    , /*Smoke Barrage*/20    , /*Shadow Barrage*/0    , /*Blood Barrage*/0    , /*Ice Barrage*/0    };
	public static final int[] drainHp = {/*Wind Strike*/0   , /*Confuse*/0   , /*Water Strike*/0   , /*Earth Strike*/0   , /*Weaken*/0   , /*Fire Strike*/0   , /*Wind Bolt*/0   , /*Curse*/0   , /*Bind*/0   , /*Water Bolt*/0   , /*Earth Bolt*/0   , /*Fire Bolt*/0   , /*Wind Blast*/0   , /*Water Blast*/0   , /*Iban Blast*/0   , /*Snare*/0   , /*Magic dart*/0    , /*Earth Blast*/0   , /*Fire Blast*/0   , /*Saradomin Strike*/0   , /*Claws of Guthix*/0   , /*Flames of Zamorak*/0   , /*Wind Wave*/0   , /*Water Wave*/0   , /*Vulnerability*/0   , /*Earth Wave*/0   , /*Enfeeble*/0   , /*Fire Wave*/0   , /*Entangle*/0   , /*Stun*/0   , /*Teleblock*/0    , /*Ancient Magicks*/ /*Smoke Rush*/0    , /*Shadow Rush*/0    , /*Blood Rush*/8    , /*Ice Rush*/0    , /*Smoke Burst*/0    , /*Shadow Burst*/0    , /*Blood Burst*/6    , /*Ice Burst*/0    , /*Smoke Blitz*/0    , /*Shadow Blitz*/0    , /*Blood Blitz*/4    , /*Ice Blitz*/0    , /*Smoke Barrage*/0    , /*Shadow Barrage*/0    , /*Blood Barrage*/2    , /*Ice Barrage*/0    };
	
	public static final boolean[] multi = {/*Wind Strike*/false   , /*Confuse*/false   , /*Water Strike*/false   , /*Earth Strike*/false   , /*Weaken*/false   , /*Fire Strike*/false   , /*Wind Bolt*/false   , /*Curse*/false   , /*Bind*/false   , /*Water Bolt*/false   , /*Earth Bolt*/false   , /*Fire Bolt*/false   , /*Wind Blast*/false   , /*Water Blast*/false   , /*Iban Blast*/false   , /*Snare*/false   , /*Magic dart*/false    , /*Earth Blast*/false   , /*Fire Blast*/false   , /*Saradomin Strike*/false   , /*Claws of Guthix*/false   , /*Flames of Zamorak*/false   , /*Wind Wave*/false   , /*Water Wave*/false   , /*Vulnerability*/false   , /*Earth Wave*/false   , /*Enfeeble*/false   , /*Fire Wave*/false   , /*Entangle*/false   , /*Stun*/false   , /*Teleblock*/false    , /*Ancient Magicks*/ /*Smoke Rush*/false    , /*Shadow Rush*/false    , /*Blood Rush*/false    , /*Ice Rush*/false    , /*Smoke Burst*/true    , /*Shadow Burst*/true    , /*Blood Burst*/true    , /*Ice Burst*/true    , /*Smoke Blitz*/false    , /*Shadow Blitz*/false    , /*Blood Blitz*/false    , /*Ice Blitz*/false    , /*Smoke Barrage*/true    , /*Shadow Barrage*/true    , /*Blood Barrage*/true    , /*Ice Barrage*/true    };
		
	public static int getInfo(int spell) {
		for(int i = 0; i < SPELLS.length; i++) {
			if(SPELLS[i] == spell)
				return i;
		}
		return 0;
	}
	
	public static int getAutoCastId(int actionButton){
		for(int i = 0; i < autocastIds.length; i++) {
			if(autocastIds[i] == actionButton)
				return autoMagicId[i];
		}
		return -1;
	}
	
	public static int castSpell(final CombatEntility c,final CombatEntility p,int spell2){
		if(c.getEntity().isDead() || p.getEntity().isDead())
			return 0;
		//can attack
		String message = Combat.canAtk(c,p);
		if(message.length() > 1){
			c.getPlayer().getActionSender().sendMessage(message);
			return 0;
		}
		if(p.getOpponent() != c && !c.getPlayer().isSkulled && p.getEntity() instanceof Player){
			if(System.currentTimeMillis() - c.lastHit > 10000){
				c.getPlayer().isSkulled = true;
				Prayer.setHeadIcon(c.getPlayer());
			}
		}
		c.getPlayer().getWalkingQueue().reset();
		c.setOpponent(p);
		//timer
		if(c.predictedAtk2 > System.currentTimeMillis()){
			c.addSpellAttack(spell2);
			return 1;//we dont want to reset attack but just wait another 500ms or so...
		}
		
		//spell id (this is the offset value for each of our arrays)
		final int spell = getInfo(spell2);
		if(c.getPlayer().getSkills().getLevel(Skills.MAGIC) < MAGIC_LEVELS[spell]){
			c.getPlayer().getActionSender().sendMessage("You need a magic level of "+MAGIC_LEVELS[spell]+" to cast this spell.");
			return 0;
		}
		int runeIdMissing = hasRunes(c,spell);
		if(runeIdMissing != -1){
			c.getPlayer().getActionSender().sendMessage("You need more "+ItemDefinition.forId(runeIdMissing).getName()+"'s to cast this spell.");
			return 0;
		}
		if(STAFF_REQUIRED[spell] > 0 && c.getPlayer().getEquipment().get(Equipment.SLOT_WEAPON).getId() != STAFF_REQUIRED[spell]){
			c.getPlayer().getActionSender().sendMessage("You need "+ItemDefinition.forId(STAFF_REQUIRED[spell]).getName()+" to cast this spell.");
			return 0;
		}
		//set timer
		c.predictedAtk2 = (System.currentTimeMillis() + 2600);//we must add a food timer etc later
		c.predictedAtk = (System.currentTimeMillis() + 2000);
		//do anim
		if(CAST_ANIM[spell] > 0)
		c.doAnim(CAST_ANIM[spell]);
		//do gfx of caster
		if(START_GFX[spell] > 0)
			c.doGfx(START_GFX[spell]);
		//offset values for the projectile
		int offsetY = (c.getAbsX() - p.getAbsX()) * -1;
		int offsetX = (c.getAbsY() - p.getAbsY()) * -1;
		//find our lockon target
		int hitId = c.getSlotId();
		//extra proj values - not to be released
		int timer = 3;
		int speed = 105;
		int distance = c.getEntity().getLocation().distance(p.getEntity().getLocation());
		if(distance >= 9) {
			timer = 6;
		} else if(distance >= 6) {
			timer = 5;
		} else if(distance >= 3) {
			timer = 4;
		}
		
		int min = 40;
		min -= (distance-1)*8;
		speed -= min;
		int slope = 12+distance;
		timer = timer*500;
		//create the projectile
		if(MOVE_GFX[spell] != -1)
			c.getPlayer().getActionSender().createGlobalProjectile(c.getAbsY(), c.getAbsX(), offsetY, offsetX, 50, speed,MOVE_GFX[spell], 43, 35, hitId,slope);
		//set damage for the event
		final int damg = MAX_HIT[spell];
		
		c.face(p.getAbsX(),p.getAbsY());
		
		//int timer = 1800;
		if(MOVE_GFX[spell] == -1)
			timer = 1200;
		World.getWorld().submit(new Event(timer) {
			@Override
			public void execute() {
				if(multi[spell]){
					if(Combat.isInMulti(c)){
						for(CombatEntility ce : getMultiPeople(c,p)){
							finishMagic(c,ce,damg,spell);
						}
					}
				}
				finishMagic(c,p,damg,spell);
				//delete runes
				deleteRunes(c,spell);
				
				if(p.getCurrentAtker() == null || p.getCurrentAtker() == c){
					p.face(c.getAbsX(),c.getAbsY());
					p.doDefEmote();
				}
				if(!p.getAttackers().contains(c)){
					p.getAttackers().add(c);
				}
				this.stop();
			}
			
		});
		return 2;
	}
	public static void finishMagic(final CombatEntility c,final CombatEntility p,int damg,final int spell){
		boolean splash = false;
		//deal damage
		damg = Combat.random(damg);
		//attack / defence
		int attack = Combat.random(c.mageAtk(SPELLS[spell]));
		int defence = Combat.random(p.mageDef());
		if(defence > attack)
			splash = true;
		if(p.getEntity() instanceof Player){
			if(p.getPlayer().getPrayer()[12] && Combat.random(2) == 1)
				splash = false;
		}
		if(splash){
			damg = 0;
		}
		final int damg2 = damg;
		if(END_GFX[spell] == 369 && !splash)
			World.getWorld().submit(new Event(800) {
				@Override
				public void execute() {
					p.hit(damg2,c.getEntity(),false);
					this.stop();
				}
			});
		else
			p.hit(damg2,c.getEntity(),false);
		p.lastHit = System.currentTimeMillis();
		World.getWorld().submit(new Event(1000) {
			@Override
			public void execute() {
				//System.out.println("resetting magic");
				if(c.getOpponent() == null){
					//System.out.println("resetting magic 1");
					if(p != null){
						//System.out.println("resetting magic2");
						c.setOpponent(p);
						Combat.resetAttack(c);
					}
					this.stop();
				}
				if(System.currentTimeMillis() - p.lastHit > 10000){
					//System.out.println("resetting magic 3");
					c.setOpponent(p);
					Combat.resetAttack(c);
					this.stop();
				}
			}
		});
		//ancients effects
		if(freeze[spell] > 0 && c.canMove() && !splash){
			p.freezeTimer = (System.currentTimeMillis() + freeze[spell]*1000);
			if(c.getEntity() instanceof Player)
				c.getPlayer().getWalkingQueue().reset();
		}
		if(poison[spell] > 0 && !p.isPoisoned() && Combat.random(100) < poison[spell] && !splash){
			Combat.poisonEntity(p);
		}
		if(drainHp[spell] > 0 && !splash)
			c.getPlayer().heal((damg2/drainHp[spell]));
		//do finish gfx on getOpponent()
		if(END_GFX[spell] != -1)
			if(splash)
				p.doGfx(85);
			else if(END_GFX[spell] == 369 || END_GFX[spell] == 363)
				p.doGfx(END_GFX[spell],0);
			else
				p.doGfx(END_GFX[spell]);
		if(p.getEntity() instanceof NPC || p.getPlayer().autoRetailate){
			p.setOpponent(c);
		}
	}
	
	public static List<CombatEntility> getMultiPeople(CombatEntility caster,CombatEntility hit){
		List<CombatEntility> k = new LinkedList<CombatEntility>();
		for(Player p : hit.getEntity().getLocalPlayers()){
			if(caster != p.cE && hit.getEntity().getLocation().isWithinDistance(p.getLocation(),1) && Combat.isInMulti(p.cE))
				k.add(p.cE);
		}
		for(NPC n : hit.getEntity().getLocalNPCs()){
			if(hit.getEntity().getLocation().isWithinDistance(n.getLocation(),1) && Combat.isInMulti(n.cE))
				k.add(n.cE);
		}
		return k;
	}
	
	public static boolean hasStaff(CombatEntility c,int rune){
		/*
		air 1381 1397 1405
		water 1383 1395 1403 6562  6563 
		earth 1385 1399 1407 3053 3054 6562 6563
		fire 1387 1393 1401 3053 3054 
		
		*/
		int staff = -1;
		if(c.getPlayer().getEquipment().get(Equipment.SLOT_WEAPON) != null)
			staff = c.getPlayer().getEquipment().get(Equipment.SLOT_WEAPON).getId();
		if(rune == 556){
			if(staff == 1381 || staff == 1397 || staff == 1405)//air
				return true;
		}
		if(rune == 555){
			if(staff == 1383 || staff == 1395 || staff == 1403 || staff == 6562 || staff == 6563)//water
				return true;
		}
		if(rune == 557){
			if(staff == 1385 || staff == 1399 || staff == 1407|| staff == 3053 || staff == 3054|| staff == 6562 || staff == 6563)//earth
				return true;
		}
		if(rune == 554){
			if(staff == 1387 || staff == 1393 || staff == 1401 || staff == 3053 || staff == 3054)//fire
				return true;
		}
		return false;
	}
	
	
	public static int hasRunes(CombatEntility c,int spell){
		if(FIRST_RUNE[spell] > 0 && FIRST_AMOUNT[spell] > 0)
			if(!hasStaff(c,FIRST_RUNE[spell]) && (c.getPlayer().getInventory().getById(FIRST_RUNE[spell]) == null || c.getPlayer().getInventory().getById(FIRST_RUNE[spell]).getCount() < FIRST_AMOUNT[spell]))
				return FIRST_RUNE[spell];
		if(SECOND_RUNE[spell] > 0 && SECOND_AMOUNT[spell] > 0)
			if(!hasStaff(c,SECOND_RUNE[spell]) && (c.getPlayer().getInventory().getById(SECOND_RUNE[spell]) == null || c.getPlayer().getInventory().getById(SECOND_RUNE[spell]).getCount() < SECOND_AMOUNT[spell]))
				return SECOND_RUNE[spell];
		if(THIRD_RUNE[spell] > 0 && THIRD_AMOUNT[spell] > 0)
			if(!hasStaff(c,THIRD_RUNE[spell]) && (c.getPlayer().getInventory().getById(THIRD_RUNE[spell]) == null || c.getPlayer().getInventory().getById(THIRD_RUNE[spell]).getCount() < THIRD_AMOUNT[spell]))
				return THIRD_RUNE[spell];
		if(FOURTH_RUNE[spell] > 0 && FOURTH_AMOUNT[spell] > 0)
			if(!hasStaff(c,FOURTH_RUNE[spell]) && (c.getPlayer().getInventory().getById(FOURTH_RUNE[spell]) == null || c.getPlayer().getInventory().getById(FOURTH_RUNE[spell]).getCount() < FOURTH_AMOUNT[spell]))
				return FOURTH_RUNE[spell];
		return -1;
	}
	public static boolean deleteRunes(CombatEntility c,int spell){
		if(!hasStaff(c,FIRST_RUNE[spell]))
			c.getPlayer().getInventory().remove(-1,new Item(FIRST_RUNE[spell],FIRST_AMOUNT[spell]));
		if(!hasStaff(c,SECOND_RUNE[spell]))
			c.getPlayer().getInventory().remove(-1,new Item(SECOND_RUNE[spell],SECOND_AMOUNT[spell]));
		if(!hasStaff(c,THIRD_RUNE[spell]))
			c.getPlayer().getInventory().remove(-1,new Item(THIRD_RUNE[spell],THIRD_AMOUNT[spell]));
		if(!hasStaff(c,FOURTH_RUNE[spell]))
			c.getPlayer().getInventory().remove(-1,new Item(FOURTH_RUNE[spell],FOURTH_AMOUNT[spell]));
		return true;
	}
	
	
	
	/*Misc magic*/
	public void alch(){
	
	}
	
	public void bonesToBannanas(){
	
	}
	
	public void enchant(){
	
	}
	
	public void telegrab(){
	
	}
	
	public static void teleport(final Player player,String location){
		if(System.currentTimeMillis() - player.teleportTimer < 1600) 
			return;
		player.teleportTimer = System.currentTimeMillis();
		int x = 3222;
		int y = 3222;
		int z = 0;
		if(location.equals("varrock")){
			x = 3215;
			y = 3424;
		} else if(location.equals("lumbridge")){
			//do nothing
		} else if(location.equals("falnor")){
			x = 2965;
			y = 3378;
		} else if(location.equals("edgeville")){
			x = 3087;
			y = 3501;
		} else if(location.equals("magebank")){
		
		} else if(location.equals("varrockpk")){
			
		} else if(location.equals("edgedungeon")){
			x = 3097;
			y = 9881;
		} else if(location.equals("argonoue")){
		
		} else if(location.equals("camelot")){
		
		} else if(location.equals("watchtower")){
		
		}
		final int x1 = x;
		final int y1 = y;
		final int z1 = z;
		int delay = 1400;
		//anim 714
		if(!player.ancients){
			player.playGraphics(Graphic.create(308, 6553635));//perfect !
			player.playAnimation(Animation.create(714, 0));
		} else {
			player.playGraphics(Graphic.create(392, 0));//perfect !
			delay = 1800;
		}
		World.getWorld().submit(new Event(delay) {
			@Override
			public void execute() {
				player.setTeleportTarget(Location.create(x1, y1, z1));
				if(!player.ancients)
					player.playAnimation(Animation.create(715, 0));
				this.stop();
			}
		});
		// 392 for ancients tele 308 for normal tele
		//anim 715
		//1400 timer
	}
}