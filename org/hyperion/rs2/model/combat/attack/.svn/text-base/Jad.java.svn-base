package org.hyperion.rs2.model.combat.attack;

import org.hyperion.rs2.event.Event;
import org.hyperion.rs2.model.Attack;
import org.hyperion.rs2.model.Location;
import org.hyperion.rs2.model.NPC;
import org.hyperion.rs2.model.World;
import org.hyperion.rs2.model.combat.CombatEntility;
import org.hyperion.rs2.model.combat.Combat;

public class Jad implements Attack {

	public String getName(){
		return "Jad";
	}
	
	public int handleAttack(final NPC n,final CombatEntility attack){
		int distance = attack.getEntity().getLocation().distance((Location.create(n.cE.getEntity().getLocation().getX() + n.cE.getOffsetX(),n.cE.getEntity().getLocation().getY() + n.cE.getOffsetY(), n.cE.getEntity().getLocation().getZ())));
		if(distance < (15+((n.getDefinition().sizeX() + n.getDefinition().sizeY()) / 2))){
			if(n.cE.predictedAtk > System.currentTimeMillis()){
				return 6;//we dont want to reset attack but just wait another 500ms or so...
			}
			int attackId = Combat.random(2);
			if(attackId == 0 && distance - ((n.getDefinition().sizeX() + n.getDefinition().sizeY()) / 2) > 1)
				attackId = 1+Combat.random(1);
			//0 -is melee anim
			//1 is range anim
			//2 is mage anim
			
			/*
			 * REAL JAD ATTACKS

				441 = Jad mage attack(projectile First)
				442 = Jad mage attack(projectile Middle)
				453 = Jad mage attack(projectile Last)
				454 = jad rocks falling range attack
			*/
			if(attackId == 0){
				//melee attack
				n.cE.doAnim(n.getDefinition().getAtkEmote(0));
				n.cE.predictedAtk = (System.currentTimeMillis() + 2000);
				Combat.npcAttack(n,attack,Combat.random(96),500,0);
			}
			else if(attackId == 1){
				n.cE.doAnim(n.getDefinition().getAtkEmote(1));
				n.cE.predictedAtk = (System.currentTimeMillis() + 2200);
				World.getWorld().submit(new Event(1000) {
					@Override
					public void execute() {
						//range attack
						attack.doGfx(454,0);
						Combat.npcAttack(n,attack,Combat.random(96),1200,1);
						this.stop();
					}
				});
			}
			else if(attackId == 2){
				//mage attack
				n.cE.doAnim(n.getDefinition().getAtkEmote(2));
				n.cE.predictedAtk = (System.currentTimeMillis() + 3000);
				World.getWorld().submit(new Event(1500) {
					@Override
					public void execute() {
						//offset values for the projectile
						int offsetY = ((n.cE.getAbsX()+n.cE.getOffsetX()) - attack.getAbsX()) * -1;
						int offsetX = ((n.cE.getAbsY()+n.cE.getOffsetY()) - attack.getAbsY()) * -1;
						//find our lockon target
						int hitId = attack.getSlotId();
						//extra variables - not for release
						int distance = attack.getEntity().getLocation().distance((Location.create(n.cE.getEntity().getLocation().getX() + n.cE.getOffsetX(),n.cE.getEntity().getLocation().getY() + n.cE.getOffsetY(), n.cE.getEntity().getLocation().getZ())));
						int timer = 1;
						int min = 16;
						if(distance > 8) {
							timer += 2;
						} else if(distance >= 4) {
							timer++;
						}
						min -= (distance-1)*2;
						int speed = 75-min;
						int slope = 7+distance;
						//create the projectile
						attack.getPlayer().getActionSender().createGlobalProjectile(n.cE.getAbsY()+n.cE.getOffsetY(), n.cE.getAbsX()+n.cE.getOffsetX(), offsetY, offsetX, 50, speed,   451, 99, 35, hitId,slope);
						attack.getPlayer().getActionSender().createGlobalProjectile(n.cE.getAbsY()+n.cE.getOffsetY(), n.cE.getAbsX()+n.cE.getOffsetX(), offsetY, offsetX, 50, speed+10,452, 99, 35, hitId,slope);
						attack.getPlayer().getActionSender().createGlobalProjectile(n.cE.getAbsY()+n.cE.getOffsetY(), n.cE.getAbsX()+n.cE.getOffsetX(), offsetY, offsetX, 50, speed+20,453, 99, 35, hitId,slope);
						Combat.npcAttack(n,attack,Combat.random(96),800,2);
						this.stop();
					}
				});
			}
			return 5;
		} else if(n.getLocation().isWithinDistance(n.cE.getOpponent().getEntity().getLocation(),100)){
			return 0;
		} else {
			return 1;
		}	
	}
	static {
		npcIds[0] = 2745;
	}
}
